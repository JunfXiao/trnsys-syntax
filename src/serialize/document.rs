use crate::ast::DocContext;
use crate::error::RError;
use crate::parse::BlockKind;
use crate::serialize::{DeckWrite, write_sep};
use std::fmt::Write;

const SEPARATED_BLOCK_KIND_SET: &[BlockKind] =
    &[BlockKind::Unit, BlockKind::Equations, BlockKind::Constants];

impl DeckWrite for DocContext {
    fn write_to<W: Write>(&self, writer: &mut W, _kind: BlockKind) -> Result<(), RError> {
        // write the header
        write_sep(writer, Some("*"))?;
        writeln!(
            writer,
            "TrnSys Deck File Generated By trnsys-syntax Project"
        )?;
        writeln!(
            writer,
            "Repository: https://github.com/JunfXiao/trnsys-syntax"
        )?;
        write_sep(writer, Some("*"))?;

        // write the blocks
        let mut is_last_block_separated = false;
        for block in &self.prev_blocks {
            let kind = block.borrow().kind().clone();
            let block_should_be_separated = SEPARATED_BLOCK_KIND_SET.contains(&kind);

            if is_last_block_separated || block_should_be_separated {
                write_sep(writer, None)?;
            }

            let block = block.borrow();
            block.write_to(writer, block.kind())?;
            is_last_block_separated = block_should_be_separated;
        }
        Ok(())
    }
}
